=================================
ユーザーカスタマイズの方法
=================================

ソルバでは予め組み込めない動作(例えば格子の変形, 境界条件など)については, 
汎用ケースクラス ``case_commont_t`` を継承した子クラスを作成し, それを
ソルバに共有ライブラリの形で読みこませることで実現出来る. ここではその手順と, 
組み込み可能な動作について説明する.

計算の手続きの分類
==================================

ソルバは大まかに, 以下の手順から成る.

1. **前処理**
2. **計算メインループ**

**前処理** は主に以下の手順から成り, 1つの計算あたり1回だけ行われる.

1. 格子の読み込み or バックアップ読み取りによる格子データ構築
2. 各種コンフィグファイルの読み取りと設定
3. 境界ゾーンの構築
4. 各ゾーンに対する境界条件の作成と設定

**メインループ** は以下の手順が繰り返し行われる.

1. 格子の変形
2. 幾何量の更新
3. 事前処理 (無い場合が多い)
4. 速度, 圧力場の更新
5. 後処理
6. データ書きだし
7. バックアップデータの書き出し

``case_common_t`` クラスには, 上記それぞれの手順のための手続きが用意されている.
ここに挙げていない細かな処理もあるが, それについては直接ソースファイルを参照して頂きたい.

オーバーライド可能なメンバ関数
==============================

.. note:: 

    インターフェースをやむなく書いている. おそらく今後のソルバのアップデートでも引数仕様は変わらないと思われるが,
    今後の方針次第で書き方が変わるかも.

前処理
--------------------------
以下の処理は計算のメインループ前に1回だけ呼び出される.
引数の ``this`` はメンバ関数を保持するクラスとその多相変数である. 
(これはfortranの言語仕様なので, 詳細な説明は省く.)

.. function:: on_define_zone(this, grid_id, face_center, face_normal, zone_id) 

    境界ゾーンを定義する. 境界面1つ1つに対してこの関数を逐一呼び出す.
    面の重心 ``face_center`` や法線 ``face_normal`` を基準に, その面がどのゾーンに位置するかを書く.

    .. note:: 

        ゾーンを Wavefront ( ``.obj`` ) で指定する場合, ここの処理は書かなくて良い.

    .. warning:: 

        指定した面に漏れがある場合, 正しい計算が出来ない. ソルバの方でも警告は出される.
        思った通りに境界面が指定されているかどうか確認するため, 表面格子の初期出力ファイル
        ``surface_t000000.xmf`` (0の数は設定により異なる) をParaviewで表示し, ``zone_id`` を
        可視化して目視でチェックすることが推奨される.

.. function:: on_loaded(this, grid, fluid, is_restart)

    計算の最初(格子データ構築後)に呼び出される. 
    独自の初期条件を与える事が出来る. ``is_restart`` は論理値で, リスタート時のみの処理分岐も可能.

.. function:: create_boundary_condition(this, bc_type, values)

    境界条件を設定する. 返値は境界条件オブジェクトのポインタ.
    以下のように書くことが推奨される.
    ``values(:)`` は境界値. 非圧縮性の場合は次元3で速度を表す.

     .. code-block:: fortran
        
        !(中略)
        integer, parameter :: YourBC = 9999999
        if (bc_type == YourBC) then
            bc => your_bc_t()
        else
            bc => create_bc_default(bc_type, values)
        end if

    ``your_bc_t()`` はユーザが作った境界条件クラス (例として ``your_bc_t``) を値として返す関数(コンストラクタ).
    ``create_bc_default`` は予めライブラリとして用意されている関数.

.. function:: on_restoring(this, unit, iostat, iomsg)

    リスタート時に呼び出される. ``on_backupping`` で書き出したバックアップデータをリスタート時に読み取るための処理.

    .. warning:: 

        ``on_backupping`` で書き出したデータの順番通りに読み取る必要がある.

    .. note:: 

        配列データの読み取りはライブラリ ``Serialization`` モジュールの関数 ``ReadArray`` を使うと便利.

.. function:: on_backupping(this, unit, iostat, iomsg)

    ユーザが独自に作成したケースクラスの変数をバックアップさせるための処理を書く.
    引数で受け取った装置番号 ``unit`` に書き出す. 
    
    .. warning:: 

        配列を書き出す場合, その配列のサイズを配列本体よりも前に書かなければならない.
        そうしないとバックアップデータの読み取り時に配列割付けが出来ない.

    .. note:: 

        配列データの書き出しはライブラリ ``Serialization`` モジュールの関数 ``WriteArray`` を使うと便利.